// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleToken {
    string public name;
    string public symbol;
    uint256 public totalSupply;

    mapping(address => uint256) public balanceOf;

    event Transfer(address indexed from, address indexed to, uint256 value);

    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) {
        name = _name;
        symbol = _symbol;
        totalSupply = _initialSupply;
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Invalid address");
        require(_value <= balanceOf[msg.sender], "Insufficient balance");

        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;

        emit Transfer(msg.sender, _to, _value);

        if (_value > 1000) {
            revert("Transfer amount exceeds limit");
        }

        return true;
    }

    function mint(address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Invalid address");

        totalSupply += _value;
        balanceOf[_to] += _value;

        emit Transfer(address(0), _to, _value);

    // Using assert to ensure a condition is always true
        assert(totalSupply >= balanceOf[_to]);

    return true;
    }
}
